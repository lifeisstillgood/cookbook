========================================
misc stuff I will find another place for
========================================

passwords
---------
/etc/passwd is a bit long in the tooth.
/etc/master.passwd is where the action is now kept.
if you look at that and need to, for example, change the login shell
you need to run pwd_mkdb /etc/master.passwd afterwords


Setting Bash prompt
-------------------

You need to set the environment variable PS1.
So, at a prompt type::

  [pbrian@delli7 /usr/home/pbrian]$ PS1=E
  E
  EPS1="$ "
  $ 
  $ ls
  ...


Well that works.  Now we can use escape characters - such as \W (basename of cwd)

::

  $ PS1="\W $"
  pbrian $PS1="\W $ "
  pbrian $ cd mikadosoftware.com/
  mikadosoftware.com $ PS1="\u@\h $ "
  pbrian@delli7 $ PS1="\u@\h \W> "
  pbrian@delli7 mikadosoftware.com>

Ok, lets save that.  Now we save in .bashrc *not* in .profile because .profile is read
on system start up and .bashrc on every spawn of a xterm.  So if something (like startx)
destroys our prompt for us, then if it was in .profile we would have default prompt, but 
if its in .bashrc we get it set back each time.


Edit these files to contain the following. In .bashrc put these statements.

# .bashrc - Bourne Again Shell configuration file 
# for interactive shells. 
# file permissions: rwxr-xr-x umask 022 BLOCKSIZE=K; 
# export BLOCKSIZE EDITOR=pico; export EDITOR PAGER=/usr/bin/more; export PAGER

# some useful aliases 
alias h='fc -l' 
alias j=jobs 
alias m=$PAGER 
alias ll='ls -laFo' 
alias ls='ls -la -G' 
alias g='egrep -i' 
alias ll='ls -laFo' 
alias ls='ls -la -G' 
alias g='egrep -i'

# set prompt PS1="u@ w $> "

Now for .bash_profile put the following statements:

# .bash_profile - Bourne Again Shell configuration file # for login shells. PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/bin: # file permissions: rwxr-xr-x umask 022 BLOCKSIZE=K; export BLOCKSIZE EDITOR=pico; export EDITOR PAGER=/usr/bin/more; export PAGER

# set ENV to a file invoked each time bash is started # for interactive use. ENV=$HOME/.shrc; export ENV # some useful aliases alias h='fc -l' alias j=jobs alias m=$PAGER alias ll='ls -laFo' alias ls='ls -la -G' alias g='egrep -i'

# set prompt PS1="u@w $> " 

http://www.freeos.com/articles/4040/



href="http://www.cyberciti.biz/tips/freebsd-how-to-start-restart-stop-network-service.html"

# /etc/rc.d/netif restart && /etc/rc.d/routing restart



Temperature
-----------
$  sysctl hw.acpi.thermal.tz0.temperature
hw.acpi.thermal.tz0.temperature: 54.0C


scp
---
Very useful in all respects but wildcards are a bugger 

$ scp *.txt myremotesvr:/tmp/misc

will copy all txt file in local dir to remote server

however

$ scp myremotesvr:/tmp/misc/*.txt ./

fails.  With *.txt not found.  Thats because the shell *expands* the commands you give it *before* 
it passes the commands to the program.  Normally thats good (in other words the shell took
*.txt and actually sent the scp program 

$ scp a.txt b.txt c.txt myremotesvr:/tmp/misc


So to solve the problem, escape the wildcard, the shell will not expand it but will 'unescape' and pass it to the program as we want

$ scp myremotesvr:/tmp/misc/\*.txt ./

http://books.google.co.uk/books?id=3XzIFG3w8-YC&pg=PA316&lpg=PA316&dq=scp+wildcard+match&source=bl&ots=oEjO3_aptE&sig=-YFh37YI4hLdFX8hWasA9N0NEOs&hl=en&ei=E5bnSe74CpG1-Qb02LjoBQ&sa=X&oi=book_result&ct=result&resnum=3http://books.google.co.uk/books?id=3XzIFG3w8-YC&pg=PA316&lpg=PA316&dq=scp+wildcard+match&source=bl&ots=oEjO3_aptE&sig=-YFh37YI4hLdFX8hWasA9N0NEOs&hl=en&ei=E5bnSe74CpG1-Qb02LjoBQ&sa=X&oi=book_result&ct=result&resnum=3


mirroring with wget
-------------------

wget -m -k -K -E http://url/of/web/site



emacs and sudo
--------------

Annoyingly, if I run ::

  sudo emacs /etc/rc.conf

sudo runs emacs, but the permissions granted by sudo do not carry over to my emacs session, making it not possible to edit the locked down file.

## tramp opens a subshell and then usually allows editing over ssh. it is useful for sudo too.
##  C-c C-f /sudo::/my/path/file
(require 'tramp)


sort and sed and uniq
---------------------

An interesting one from Dru Lavigne's little nuggets of wisdom

::


 pbrian@delli7 Desktop$ pkg_info | sort | sed -e 's/-[0-9].*$//' | uniq -c | egrep -v '\ *1'
   2 autoconf
   3 automake
   2 font-adobe
   2 font-adobe-utopia
   2 font-bh
   2 font-bh-lucidatypewriter
   2 font-bitstream
   2 glib
   2 gtk
   3 xorg-fonts
 pbrian@delli7 Desktop$ pkg_info | sort | sed -e 's/-[0-9].*$//' | uniq -c | grep -v '^[[:space:]]*1'
   2 autoconf
   3 automake
   2 font-adobe
   2 font-adobe-utopia
   2 font-bh
   2 font-bh-lucidatypewriter
   2 font-bitstream
   2 glib
   2 gtk
   3 xorg-fonts

Quick discussion - we get pkg_info sending us things like ::

  zip-3.0             Create/update ZIP files compatible with pkzip

* We use sed to remove everything from the first -Numeral 
* sed -e "s for substitute / this / for that /"
* Then uniq -c gives each word and a count of the occurances
* then grep -v to weed out anything that only occurs once.

Nice example showing a lot of the standard goodies on the command line.

Also interesting is the grep [[:space:]] - but I find '\ ' more readable


