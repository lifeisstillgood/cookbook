======
Erlang
======

Learning a new language
=======================

This is my section on learing a new language.  There are about 4 major 'types' of language - Procedural, Declarative, OOP and functional.


To get competant 

- use major idioms as much as possible - even where it seems inappropriate. try it out.
- language reference
- debugging
- unit testing
- Find the community, and involve in developing modules for common needs like 
  better self documentation, doctest like functionality etc etc

Simplest possible introduction or two
-------------------------------------

into math1.erl place::

  -module(math1).
  -export([factorial/1]).

  factorial(0) -> 1;
  factorial(N) -> N * factorial(N-1).

now start up erlang command line - erl

::
  

  3> c(math1).
  {ok,math1}
  4> math1:factorial(5).
  120


Issues
------
yes it does seem you need to name the module in the filename and in the -module declaration - they do need to match.  Seems odd, but sure there is a reason for this.


What happens
------------
pattern matching - looks for first pattern match, so
factorial(0) does not match till meet end condition.


Whats this /1 business?
We are exporting a function, it has 1 parameter.
F/N notation shows a function F with N parameters.


tuples
------
Defined with {} (interesting python switch there)

::
   
    mytuple = {triangle,1,2,3}

Here mytuple is *not* a variable. In erlang nothing varies...
However mytuple's value is a tuple of the *atom* triangle and 3 integers


Pattern Matching
----------------

::

    - module(test1).
    - export([area/1]).

    area({square, Side}) ->
        Side * Side;
    area({rectangle, X, Y}) ->
        X * Y;
    area({circle, Radius}) ->
        3.14159 * Radius * Radius;
    area({triangle, A, B, C}) ->
        S = (A + B + C)/2,
        math:sqrt(S*(S-A)*(S-B)*(S-C)).


OK, tuples, we have covered.
Pattern matching now - 

- function
  these seem to be defined like a sentence - ending in period.
- clauses
  these are inside a function, and end with a ;

so the above has a function area/1, which has 4 clauses, which one will match depends on 
the call itself.  area({circle,10}) will match the 3rd clause, and


::

    area({circle, Radius}) ->
                  ^^^^^^
                  Free Variable, which gets *bound* to the value 10
         ^^^^^^^^^^^^^^^^
         the head of the function defintion



::

    area({triangle, A, B, C}) ->
        S = (A + B + C)/2,
        math:sqrt(S*(S-A)*(S-B)*(S-C)).
 
Here we see a sequence.  There is no ; - just a comma - which is seperating two *statements*.
Statements are evaluated sequentially, the return value being result of last statement.  The *temporary variable* S is 
I think limited to the clauses' namespace.



Data Types
----------

constant datatypes
~~~~~~~~~~~~~~~~~~
- atoms  - abc, 'An Atom with spaces', hello_world
These are constants with names equal to the value.  I think

- numbers - floats and ints

Compound datatypes
~~~~~~~~~~~~~~~~~~
tuples {}, lists []
Tuples have a *fixed* number of items
Lists have a variable number of items (I beleive they are copied, appended then destroyed )

Variables - always begin with UpperCase letter
This is enforced in the interpreter !

::

    5> c = 12.
    ** exception error: no match of right hand side value 12
    6> C = 12.
    12






Pattern Matching
----------------

::

    -module(temperature).
    -export([convert/2]).

    convert({fahrenheit, Temp}, celsius) ->
            {celsius, 5 * (Temp-32)/9};
    convert({celsius, Temp}, fahrenheit) ->
            {fahrenheit, 32 + Temp * 9 / 5};
    convert({reaumur, Temp}, celsius) ->
            {celsius, 10 * Temp / 8};
    convert({celsius, Temp}, reaumur) -> 
            {reaumur, 8 * Temp / 10};
    convert({X, _}, Y) ->
            {cannot, convert, X, to, Y}.

    12> temperature:convert({celsius, 20}, fahrenheit).
    {fahrenheit,68.0}

    13> temperature:convert({fahrenheit, 68}, reaumur).
    {cannot,convert,fahrenheit,to,reaumur}

OK that second one seems unlikely - so I shall match fah to reaumur as pattern matching, but call other functions in sequence for myself

::

    convert({fahrenheit, Temp}, reaumur) ->
            {D, C} = convert({fahrenheit, Temp}, celsius),
            convert({celsius, C}, reaumur);

here I create a new clause - designed to convert from fah - cel then to reaumur - it will avoid the cannot convert trap.
I am unsure if you can do this in temperature terms, but its nice to see it in erlang

This shows two things - unpacking - on the RHS of the first stmt I get back a tuple, and I unpack into D and C
C is passed on

Now problems - this is very procedural.  And it drops D from the running.  I even get a warning.

::

    36> c(temperature).                                
    ./temperature.erl:15: Warning: variable 'D' is unused
    {ok,temperature}

so I am not being erlang-y enough.




=====
Day 2
=====

Solution to the above is the *anonymous* variable underscore _

if I replace the above as 

::
    {D, C} = convert({fahrenheit, Temp}, celsius)
    ... becomes ...
    {_, C} = convert({fahrenheit, Temp}, celsius)

I do not get a warning that variable D is unused.  _ is the 'I dont care variable'

=====
Day 3
=====

assignment operator 

equals '=' is back to its mathematical roots, not its computer science tradition.
Since variables are fixed, then there is no need for an assignment operator.  

traditionally the conversation went ::

    X = 1
    print X
    1
    X = 2
    print X
    2

Here '=' means 'assign' the RHS to LHS

In Erlang::

    X = 1
    % Hmm, I need to balance the LHS and RHS of the equation.  I solve the RHS first.  That is 1.
    % Now, to make that balance the LHS needs to be 1.  OK, since there is no LHS value I can do that
    
    X = 2
    % OK, RHS solved first, that is 2.  Solve the LHS, since X is immutable, its 1, and 1 = 2. Nope, so error.


Arithemtic
----------

Integer arithmetic - an awkward one - 2 integers divided by / will result in a float 
If we want to keep integers as integers use div

::

    2> 10/3.
    3.3333333333333335
    3> 10 div 3.
    3

Atoms
-----

::

    4> monday.
    monday
    5> {monday, tuesday, Wednesday}.
    * 1: variable 'Wednesday' is unbound
    6> {monday, tuesday, 'Wednesday'}.
    {monday,tuesday,'Wednesday'}

monday here is an atom.  An atom is a constant name that has the same value as its name.  Its a very simple expression, name=value.. Just like an integer
Atom names can be quoted to include non alphanumeric characters (and _ @)

Tuples
------
Tuple is immutable list oshown by {}

::

    1> Person = {person, 
    1>           {name, paul},
    1>           {height, 6},
    1>           {eyecolour, brown}}.
    {person,{name,paul},{height,6},{eyecolour,brown}}
    2> 

here, the first part of a tuple is by convetntion a reminder of what the rest of the tuple is about.  erlang is not OOP.  It seems to have no data hiding or encapsultion
it seems that getting to data in a uple in a convenietn manner is a bit hard.. for example , if I want to get the name of the person I need to unpack the variable Person
into placeholders in a way that the unpacking neds to understand the tuple strucutre  

this looks like it will get tired quickly I am guessing something better lies arounf the corner.


::

    2> {_,{_,Myname},{_,_},{_,_}} = Person.
    {person,{name,paul},{height,6},{eyecolour,brown}}
    3> Myname.
    paul
    4> 

Thats a lot of work to get a name out of an existing data tstructure.

However it is all about pattern matching 0 the pattern on LHS matches that on right hand side - this may be significant

lists
-----

::

    4> L = [1,2,3].
    [1,2,3]
    5> [H|T] = L.
    [1,2,3]
    6> H.
    1
    7> T.
    [2,3]

OK, we create a list, we can get the head and the tail (head is first element, tail is remander, usually a list.  In fact it its expected to be a list 0 if not it is improper ly formed list )

strings
-------
some real gotchsas here::

    8> [114,115,116].
    "rst"

yup, the results of list containing ASCII (actually its ISO 8859-1) charactr 114(r) 115(s) 116(t) are printed as the ascii values.  A string is after all a list. 

This is partly because it seem erlang has not types  Not even strings.  Hmmmm....

dollar syntac
-------------

::

   $r.% is actually not the character r but the integer value used to represent r ie 114

in short, as far as Erlang cares, a string is just a list of integers in some encoding - Latin1.  If *on the way out* it prints meaningfully, great.  but it is still a list of integers - damn usability!


forget -f ().
-------------

f(). will force the erl interpreter to forget all bound variables upto this point. very useful.


pattern matching - not exact but capable
----------------------------------------

these two match up ok

if T is a list of [{apple,3}, {pear,5}...
then T can be passeed in here even if the parameters *look* different.


::

    total([{Item, Number}|T]) -> cost(Item) * Number + total(T);
    total([]) -> 0.


If I pass in a list to total([]) I get back a 0.  this is cos the [] matches the second clause.

If I pass total([{milk,1}]) I get 1 * cost(milk).  the arguments match the first clasue because [{milk,1}] is really a shorthand for [{milk,1}|[]].
in other words [H] is same as [H|[]]

in short, most functions (I think) will act a lot like this::

    function([Head | Tail]) ->
                              somefunction(Head) + function(Tail);
    function([]) ->  0.

In other words recurse through a list (not iterate !!!) and do something with the head of each list, calling back to repeat on the tail.










modules
=======


lists module
------------
This is, frankly, it as far as functional languages go.  LISt Processing is of course the whole point.  And it is seriously mond bending for quite a while.  I certainly do not get it yet.

Append for example.  How would you write that in python?
Perhaps... ::

   def myappend(a,b):
   
       for item in b:
           a = a + item

Now this has some simplicity to it, but it involves a constantly changing variable.


Well its not really like that here.  Its recursion remember...

append has two clauses::
 
    append(A,B) append/2 works like this

    append([H|L1], L2) -> [H| append(L1, L2)];
    append([], L) -> L.


so the first call is::

    append([1,2,3], [4,5,6]), 

which matches the first clause like this::

    append([1|[2,3], [4,5,6]) -> [1| append([2,3], [4,5,6])]

now that basically returns a list, with 1 as its head and the result of append(2,3, 4,5,6). 
So lets follow that through.  append([2,3], [4,5,6]) matches first clause again, and so the first clause will output

    append([2|3], [4,5,6]) -> [2| append([3], [4,5,6])]

and then append([3], [4,5,6])] will match the first clause again::

    append([3|[]], [4,5,6]) -> [3| append([], [4,5,6])]
             ^^^^            

Now look at the ^^^^ - [3] is a proper list in erlang.  This means it is *really* [H|T] where H is 3 and T is an *empty list*.  So [3] will match [H|L1].

However there is a corollary to that.  [3|[]] is really [3], and so [3|[4,5,6]] is *really* [3,4,5,6].
See the point now?  At this point, append([], [4,5,6]), the recursion has essentially reached its bottom value. 
The second clause will kick in and return [4,5,6].
And as we go back up the chain we are returning not [3| append([], [4,5,6])] but [3|[4,5,6]], which is *really* [3,4,5,6]

so the whole thing looks like 



    0 append([1|[2,3], [4,5,6]) -> [1| append([2,3], [4,5,6])]
    1 append([2|[3], [4,5,6]) -> [2| append([3], [4,5,6])]
    2 append([3|[], [4,5,6]) -> [3| append([], [4,5,6])]
    3 append([[], [4,5,6]) -> [4,5,6]
    2 ...  -> [3| 4, 5, 6] % which is same as -> [3, 4, 5, 6]
    1 ...  -> [2| 3, 4, 5, 6] % which is same as -> [2, 3, 4, 5, 6]
    0 ...  -> [1| 2, 3, 4, 5, 6] % which is same as -> [1, 2, 3, 4, 5, 6]
   
I am still searching for an easy way to view/visualise the descent and reascent into recursion.

An easy Mistake::

    -module(myappend).
    -export([myappend/2]).

    myappend([H|L1], [L2]) -> [H|myappend(L1, L2)];
    myappend([], L) -> L.

[L2] in the first clause should be L2, so I had trouble pattern matching.

so I got ::

    3> myappend:myappend([1],[3]).
    [1|3]
    4> myappend:myappend([1],[3,4]).
    ** exception error: no function clause matching myappend:myappend([1],[3,4])
    5> myappend:myappend([1],[[3,4]]).

L2 can be anything - in the first case an integer as a list.  In the second it was just a list - so erlang looked for 
a pattern that could match [L2], and found only a list (L2) but no list around the list. 

finally::

    6> myappend:myappend([1,2,3,4],[3]).
    ** exception error: no function clause matching myappend:myappend([2,3,4],3)
         in function  myappend:myappend/2

erlang clearly matches [3] ok going in, but on the second part of clause 1, it drops the [] around 3. so matching fails.
Thats annoyingly inconsistent and I need to watch for it.  


