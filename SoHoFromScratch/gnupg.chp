==================
GnuPG - encryption
==================

::

  cd /usr/ports/security/gnupg
  make install clean

Also, and weirdly it is not marked as a dependancy in the Makefile

::

  cd /usr/ports/security/pinentry
  make install clean

  (tip of the hat to http://www.marksanborn.net/security/encrypt-a-file-on-linux-or-freebsd-with-gnupg/ for that - it was driving me nuts.)



Make a key
----------

::

  gpg --gen-key

::

    pbrian_laptop# gpg --gen-key
    gpg (GnuPG) 2.0.13; Copyright (C) 2009 Free Software Foundation, Inc.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.

    Please select what kind of key you want:
       (1) RSA and RSA (default)
       (2) DSA and Elgamal
       (3) DSA (sign only)
       (4) RSA (sign only)
    Your selection? 1
    RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 2048
    Requested keysize is 2048 bits
    Please specify how long the key should be valid.
	     0 = key does not expire
	  <n>  = key expires in n days
	  <n>w = key expires in n weeks
	  <n>m = key expires in n months
	  <n>y = key expires in n years
    Key is valid for? (0) 0
    Key does not expire at all
    Is this correct? (y/N) y

    GnuPG needs to construct a user ID to identify your key.

    Real name: Paul Brian
    Email address: paul@mikadosoftware.com
    Comment: 
    You selected this USER-ID:
	"Paul Brian <paul@mikadosoftware.com>"

    Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
    You need a Passphrase to protect your secret key.


    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.
    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.

    gpg: /root/.gnupg/trustdb.gpg: trustdb created
    gpg: key B966C47D marked as ultimately trusted
    public and secret key created and signed.

    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    pub   2048R/B966C47D 2010-02-01
	  Key fingerprint = 7448 EEED 7C44 5D1A 7D7D  3CEF DBA3 0B24 B966 C47D
    uid                  Paul Brian <paul@mikadosoftware.com>
    sub   2048R/1B699095 2010-02-01


PinEntry
--------
pinentry is simply a very secure way to take a password from you (does not store the password in /tmp file to make life easy for the developer etc etc)



simple usage examples
---------------------
http://homepages.inf.ed.ac.uk/da/id/gpg-howto.shtml


IT Manager uses
---------------
Sharing Server Passwords

This shows good use of keyrings 



Which Ancryption Algorithm should I use?
----------------------------------------

I plump for RSA.  Mostly because it has had much more scrutiny.  But the below is probably the must succinct explanation I have yet found.
 
From http://www.linuxquestions.org/questions/linux-security-4/gpg-rsa-or-dsa-with-el-gamal-for-new-keys-565242/  by MindOfMercury

::


    -----BEGIN PGP SIGNED MESSAGE-----
    Hash: SHA1

    I realize that this is a really, really old thread, but I read this, and had to intervene.

    DSA and Elgamal are both based on an underlying mathematical problem, called the discrete logarithm problem, or DLP. The DLP is believed to be very, very hard to solve in any reasonable amount of time.

    RSA is based on an underlying mathematical problem, called the integer factorization problem, or IFP. The IFP is believed to be very, very hard to solve in any reasonable amount of time.

    Notice a similarity, here? Other than the problem that they're based on, they're both very secure. Sorry to be the contradictor here, but RSA is used a hell of a lot more than DSA/Elgamal. Cryptographic tokens such as USB tokens and smart cards use RSA. Most SSL/TLS sites utilize RSA keys. SSH uses, mostly, RSA keys. GnuPG, though, didn't use RSA until more recently, so older GPG users might have a problem.

    The main reason that DSA keys are used in GnuPG is because of the signature system. DSA keys generate signatures whose length depends on the length of the hash used to make the signature. DSA is also restricted on the type of hash that it can use. It's REQUIRED to use SHA1, you don't have a choice. RSA keys generate signatures whose length depends on the length of the signing key. RSA keys tend to generate obnoxiously long signatures.

    On the flip side of convenience, you have security (which is obviously a hell of a lot more important.) It's believed, but not proven, that the DLP that DSA is based off of is a harder problem to solve than the IFP that RSA is based on. You've also got public exposure and scrutiny. DSA was developed by someone at the NSA. RSA was developed by three guys at MIT. RSA, since it's so common, has undergone a ridiculous amount of scrutiny and research. DSA hasn't had that much exposure or scrutiny. It's also led to the recent factoring of a 1017-bit number. Remember what I said about RSA being based on integer factorization? Beware, though. While it may sound like DSA is the winner, there is something that plays against it. I mentioned that DSA has to use SHA1. Well, SHA1 has been broken. Not "totally useless" broken, but "cryptographically iffy" broken. See below for a greater explanation. You're also restricted to a 1024-bit DSA key. You can't make it any bigger, except in a certain case that I'll discuss later.

    So, to summarize what we've got so far:

    Pros:
    RSA - Common, studied, widely believed to be secure.
    DSA - Widely compatible with GPG of just about any version. Shorter, more convenient signatures.

    Cons:
    RSA - Believed to be less secure than a DSA key of the same length. Ridiculously long signatures. Not as compatible, GPG wise.
    DSA - Small keysize might leave it quickly vulnerable to a break. Underlying hash, while still trusted, is not suggested for use in new cryptographic applications.

    That last one sounds like an issue, right? Well, I thought so, too, until I did a little digging. There's an update to DSA. When SHA1 was cracked, and the keysize started getting a little too small for comfort, the DSS (the underlying specification of the DSA algorithm) was updated. Instead of being restricted to a 1024-bit key using SHA1, you're now able to use 2048 and 3072 bit DSA keys with better hashing algorithms (SHA224/256 for 2048, and SHA256/384/512 for 3072, your choice.) This does create a compatibility problem for any version of GPG released prior to the updated specification (which is still in draft form. Final draft, but draft, nonetheless.) And it's a fairly inconvenient thing, too - Anyone that doesn't have a specific command in their gpg.conf won't be able to utilize your key.

    So, all in all, it's pretty much your choice. A 2048-bit RSA key, or a 1024/2048 DSA/Elgamal keypair should be more than secure enough, even with the relative (and, currently, minor, though that may change) insecurity of the SHA1 algorithm. The SHA1 break is more theoretical than practical. They found collisions (two different plaintexts that hash to the same output) in 2^69 operations, instead of the 2^80 that they should have. That means that finding a collision is 2000 times easier than it should be. It's still trusted as a cryptographic hash, but in new systems, it's suggested to move away. It's one of those "if you're using it, keep using it, but if you're making a new system, use something else" situations.

    If you're paranoid, like me, you can go higher; 4096-bit RSA, or 1024/4096 DSA/ELG-E. Throwing the following in your gpg.conf will let you generate the later revision DSA keys and specify the hash algorithm you want to use, like what I created for experimental purposes (3072/4096 DSA/ELG-E, SHA512):

    expert
    enable-dsa2
    digest-algo sha512

    But remember, anyone without the "enable-dsa2" line won't be able to use keys generated with this method, even your public key. They also will have a problem verifying your signatures.

    I'm not a cryptologist, by any means. I've just done a LOT of homework on the subject.

    Caveat emptor.
    -----BEGIN PGP SIGNATURE-----
    Version: GnuPG v1.4.7 (MingW32)

    iD8DBQFHXs4nDoqvN5msFf8RAqftAJwKuCo9frndg1sy85qHNp0KboWEFwCeNkdx
    wXNgCSAWvh6oRgA2a0MFldg=
    =C/V0
    -----END PGP SIGNATURE-----
