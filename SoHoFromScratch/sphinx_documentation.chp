============================
Documenting code with Sphinx
============================

`Sphinx <http://sphinx.pococo.org>`_ is the new standard for Python documetnation. 
and whilst it can be a bit awkward to start with, it is surprisingly useful.

Firstly it can be installed simply through easy_install::

  $ easy_install sphinx

In short, Sphinx takes ReSt-based documents that you write, along with ReSt-based docstrings from within Python files, and outputs HTML (or PDF).

Documenting a project 
=====================

It is best to divide up each project into Python packages, or at the very least directories that make sense.  Inside each directory I recommend putting::

  .doc/
      .doc
      .test
      .spec
  .deploy/

in the first .doc run *sphinx-quickstart* which will create a configuration file and a few other directories to set up sphinx *in this directory*.  They are fairly straightforward settings. but I suggest taking the autodoc option now.  Ensure that in the conf.py file the following line (or similar exists::

   extensions = ['sphinx.ext.autodoc', 'sphinx.ext.autosummary']

You will probably need to manually add the *sphinx.ext.autosummary*.  

These two settings enable a useful capability.  Sphinx is able to examine any importable module that you point it to and produce documentation based on docstrings.  Otherwise it simply produces documentation on what you write.

AS an example, imagine I am working on tracTools, and want to put a quick paragraph together and then let Sphinx output all my docstrings I worked so hard on.::

   <file: tracToolsOverview>
   This is a document that gives and overview of tracTools
   You can see what tracTools does, oh and here is a link to a module
   you should know about if you are a developer

   .. autosummary::

      tracTools.mikadoSvnLib

   Now, this link will not work if there is not a *stub file* in the 
   reach of Sphinx (same directory?) that does not produce an autodoc
   of the module.

   <file: tracTools lib stub file>
   .. automodule:: tracTools.mikadoSvnLib

the stub can have any name as long as it ends in *.rst* or whatever
*source_suffix = '.rst'* has been set to. 
You can also include more than one automodule in one stub file, but 
it is clearer to have one stub file per module.

This gives us coverage of the documentation, and we can then concentrate
our writing onto important areas.






