=========
X Windows
=========

Show me the windows
===================

X-Windows, otherwise known as just *X*, is the Unix version of the well-known Windows/Mouse Graphical User Interface.
First developed at Parc-Xerox [#]_ the concept of using 
overlapping windows, and a 'mouse' is often seen as the *only* way to interact with a computer.

Of course the Unix tradition is for a command line interface - and I can happily attest that typing in commands to a shell is a more powerful way to control a computer in almost all cases. [#]_ . However, if you want to "use" a computer, for web surfing, graphics, and simple everyday actually not going mad usage, you need a GUI.   


Installing
----------
There is a meta-port for X windows. ::

 x11/xorg

Simply install this - takes about 6 hours.  Yes. Six. On a decent 3 year old machine.  Firefox will take 3. Almost anything graphical takes forever to compile.  Just accept it.

Anyway,  if you just left it at *X* then you would only ever get a true 1980's experience of sawtooth background and poor looking windows.  This is because X is designed not to look good, but to provide the functionality other programs on top can use.  These programs are called *Windows Managers*.  The best known in the X world are KDE and GNOME.  Installing either can be a 12 hour compile easily, and they have a bewildering array of options.  I suggest using a simple but effective WM called xfce4::

  x11-wm/xfce4

Anyway, we have X installed, and a window manager to make things look good / not awful...

We are still at the command line when we boot our machine, and after logging in I still only have the prompt. On a machine that has X installed, we can type ::
  
  startx

and up comes the GUI. (to get out of the GUI, use *ctl-alt-backspace*. This will stop the current X session)



:sidebar: Enabling the mouse daemon. 
          You should have the mouse daemon enabled in /etc/rc.conf
          moused_enable="YES"
          Otherwise, X will try and use /dev/sysmouse and nothing much will happen when you move the (non-serial) mouse.


Initial Configuation.
---------------------
I am assuming we are only using one video card and one monitor. 
More complex arrangements can come later.
(See chapter 5 of Handbook for more details)

After we have successfully got the meta port above installed we want to configure the X settings. This is fairly complex, but also pretty well automated. All the settings are controlled from one file, xorg.conf, which is usually found in*/usr/local/etc/X11/xorg.conf*.  Except that right now there is no such file there.  We create it by, as root, getting Xorg to do the hard work::
 
 $ Xorg -configure

This will automatically scan your hardware and put a config file in /root called xorg.config.new

Try it out - you never know !::

 $ Xorg -config /root/xorg.config.new

You will see a sawtooth background with a X cross in the middle. Try moving the mouse. If the cross moves too, good.  If not, you probably need to enable the mouse daemon. (see sidebar)

More than likely you will have a sawtooth pattern that has lines "scanning" through it wildly.  You'll know what scanning means when you see it.  This is because the scan and refresh rates that X-Windows is trying to use are out of whack with the ones the monitor uses.

Don't forget - you can "kill" off the X display using ctl-alt-backspace

Now we come to the hard part of X windows installation, otherwise known as "somehow finding what on Earth our monitors specs are".  For some reason these are always hard to get hold of.  Really. Its as if there is a global conspiracy design to not tell you what the Vertical Refresh rate for your own monitor actually is.  

::

  "No Mr. President, the NSA considers it effectively imposssible to prevent 
  International Terrorists from accessing military grade encryption on the 
  Internet.  But Plan Omega ensures that when they do, their screens will 
  look funny and their eyes will slowly become really sore and irritating... 
  BwaHahahahahahahahahaha"


Monitor specs
-------------
Before we can finish the configuration of X, we need to know the basic specifications of the Monitor we are using, in other words the Horizontal Sync rate and Vertical refresh rate (think of these as how long it takes to start at top left pixel and repaint the whole screen down to bottom right.)

A (fair) bit of googleing with the product ID from the back of my unbranded monitor, gets me ::

 EDID Name : CAL L15CX
 Minimum HorizSync : 30.000 kHz
 Maximum HorizSync : 60.000 kHz
 Minimum VertRefresh : 56 Hz
 Maximum VertRefresh : 75 Hz
 ...
 Maximum Width : 1024 pixels
 Maximum Height : 768 pixels
 ...


So I want to enter the following  ::

 HorizSync    30-60
 VertRefresh  56-75

I try it - and hey presto, it looks worse and the sawtooth is still flickering. So I play around with the settings a bit. [#]_   Hmmm, now the lines are rolling up the screen, which looks pretty for 5 seconds and nauseau-inducing thereafter.  Anyway, I guess it is the vertical refresh rate that is wrong, and so I constrain the vertical refresh rate, 69-75, then 74-75, and then I decide to drop the max and try 70-70.  Are you as bored as I am?  Ok, *eventually* I experiment with the right settings and things work OK.::

 HorizSync    50-60
 VertRefresh  56-70

So, we have a refresh rate that is OK to stare at, now let us fix the
resolution. 

Resolution
----------

Part of xorg.conf shows a section called "Screen".  A Screen is the
complete "paintable" area the computer can use.  This is more obvious in 
setting up `dual monitors </SoHoFromScratch/dualX.html>`_ 

A Screen is a virtual display area, binding at least one video card output (Device) and at least one Monitor.  

So below the Screen0 Section joins Card0 and Monitor0 together, and
says that the 24 bit colour depth supports 1024x768 pixels.


::

 Section "Screen"
        Identifier "Screen0"
        Device     "Card0"
        Monitor    "Monitor0"
        DefaultDepth 24

        SubSection "Display"
                Viewport  0 0
                Depth     24
                Modes     "1024x768" "
        EndSubSection
 EndSection



Keyboard layout
---------------

Looking elsewhere in xorg.conf we find ::

  Section "InputDevice"
    Identifier  "Keyboard0"
    Driver      "kbd"

I can and usually do have the odd situation that before I launch X my keymap 
works fine (ie I get a " mark when I expect).  After running X, suddenly I am using a different keyboard mapping.  T is because the OS is reading the line in /etc/rc.conf that says *keymap=uk.iso*.

Unfortunately X will ignore this and default to some American setting. Which means that *"* is in the wrong place as is a fair number of other characters.
This is annoying, but luckily we know that here, in xorg.conf are the settings that X will use.

We can see the various options in /usr/local/share/X11/xkb/rules/org.lst

UK is gb. 

(Now actually Great Britain is not the same as United Kingdom, and
this is one of those internationalisation problems, that the real
world is a lot more complicated than one poor programmer can be
bothered to deal with)

Now this file is in the Xkb directory and if you grep for ^!
! model
! layout
! variant
! option

so I want::

  Option "XkbLayout" "gb"

If I wanted to give a command about a variant it is::

  Option "XkbVariant" "xxxx"


Turn off Capslock
-----------------

Oh dear god yes.

Have a look in /usr/local/share/X11/xkb/rules/org.lst - do you see
it.  Oh wonder of wonders.  A way to turn off the capslock key, the
useless appendix of the typewriter, out-evolved and just laying there
waiting for an unwary thumb to catch it an ruin a line of text.
 

under !option  I find ctrl:nocaps

Option "XkbOptions" "ctrl:nocaps"

(OK, its Options with an s. Nothing is quite perfect, just accept it for now. A little bit of handwaving.)


	
Fix the config file in the right place
--------------------------------------

::

   # cp xorg.conf.new /etc/X11/xorg.conf

OR

::

   # cp xorg.conf.new /usr/local/etc/X11/xorg.conf
   # I prefer this location, but /etc is really more "BSD"

 
Now try startx - and horray I can type shft-2 and see " and if I press
capslock, it ignores it (well it treats it as a second ctl key. This
is very very good.)


Fonts
-----

The fonts supplied from a bare build of BSD are "OK", but barely so.
We want to improve the situation, we all want a bit of that luscious screen
goodness.  Its not just that - applications like Firefox have real trouble
without decent font selections to pull from, especially when it comes to printouts.  They can look really ugly.

We can install 3 sets of fonts that will in most cases solve most problems 

* x11-fonts/urwfonts
  
this requires this line::

  FontPath     "/usr/local/lib/X11/fonts/URW/"

To be added to Section "Files" in /etc/X11/xorg.conf

* TrueType Fonts

Basically get them from your (licensed) Windows box, and put them onto the 
BSD, then turn off Windows.

0. build  /usr/ports/x11-fonts/ttmkfdir

1. Add line ::

          Load  "freetype"

to Section "Modules" in /etc/X11/xorg.conf

2. Put TrueType fonts into right directory::

  mkdir /usr/local/lib/X11/fonts/TrueType/
 
::

  (On windows box)
  cd C:\WINDOWS\Fonts
  pscp *.ttf root@<BSDBox>:/usr/local/lib/X11/fonts/TrueType/
  (files copy over ...)

Now run 

::

  cd /usr/local/lib/X11/fonts/TrueType/
  ttmkfdir -o fonts.dir


then add this line::

  FontPath     "/usr/local/lib/X11/fonts/TrueType/"

To Section "Files" in /etc/X11/xorg.conf


xterm 
-----


x11/rxvt-unicode is a highly recommended xterm (see reddit thread
http://www.reddit.com/comments/6wn5w/ask_proggit_whats_your_favorite_terminal_emulator/)




XDM
---

For testing purposes, we just want the XDM to run as a normal process not a daemon.  So we call it as ::

 #xdm -nodaemon

(ctl-alt-F1 *should* kill off xdm)

now, normally ::

 % echo "/usr/local/bin/startxfce4" > ~/.xinitrc


will ensure that when I type 'startx' xfce will run.
However if I use xdm, it does not use my .xinitrc file.

xdm uses files found in ' usr/local/lib/X11/xdm' for configuration.
So I can use a ~/.xsession or the global xsession file

% echo "/usr/local/bin/startxfce4" > ~/.xsession

so 
1. .xinitrc file with startxfce4 works only with startx, not with xdm
2. .xsession file with startxfce4 works with xdm


Now how to run xdm every boot
-----------------------------

can be set as a tty - in /etc/ttys this line is off by default.::

 ttyv8   "/usr/local/bin/xdm -nodaemon"  xterm   off secure

setting it to on will ensure each boot gets you a graphical login.




Swapping between vitrual terminals
----------------------------------
X runs on a virtual terminal (alt-F1 alt-F2 etc)
If in X you can go to the other tty using ctl-alt-F1 for example.
Then get back using alt-F9 (usually there are 8 tty set up in /etc/ttys - so X snaffles the 9th)


SPlash screens and xmodmap
--------------------------
http://www.freebsd.org/doc/en/books/faq/x.html#XDM-BOOT


More than one card / monitor
============================

`dual monitors </SoHoFromScratch/dualX.html>`_

biliography
-----------

http://www.freebsdmadeeasy.com/tutorials/freebsd/set-up-xorg-on-freebsd.php

#useful discussion on X setup 
http://ubuntuforums.org/showpost.php?p=129379&postcount=21

More on xorg.conf
-----------------

This is a mysterious little file, if only because "playing" with it can easily end up with no display and you looking silly.  

So here is a whirlwind tour.

1. ServerLayout
2. Screen (device monitor)
3. InputDevices
4. Fonts



.. [#] (and the history of that development and how Apple and Microsoft subsequently took the concepts to the mainstream is fascinating and can be found at .)

.. [#] This harks back to my main thesis - that programming is to the 21C what literacy was to the 16C. 

.. [#] some background, which applies to Cathode Ray style monitors, but the same principle applies to LCD-style screens too.
       http://www.monitorworld.com/faq_pages/q10_page.html::
       A monitor's maximum vertical refresh rate is limited by how fast it can direct the electron beam over all of the picture elements on the monitor. This involves moving the electron beam in the same manner as you would read the words in a book, left to right, top to bottom. It is limited by the maximum HSR, which determines the maximum horizontal pixel addressability the monitor can display and the number of scanlines (i.e. vertical addressability). For example, to display a screen with an addressability of 640 pixels horizontally and 480 vertically, a monitor with a HSR of 31.5kHz would take 480/31.5k = 15.2 ms to scan the entire screen once. In one second, this monitor could be refreshed 1000ms/15.2ms = 65.6 times.
       However, the vertical sync - movement of the electron gun to the upper left corner of the screen - requires some time, so the resulting vertical refresh rate is only 60 Hz.

.. [#] OK, the manuals and help online generally tell you that "playing around" can be a bad idea - in theory you can burn out the cathode tube on your monitor.  Play around less, Google more might be a good idea, but what if the whole world did that, there would be nothing on Google left to find.  Then we would have to talk to each other, flirt, that sort of thing.  So play, play, its the only way the human race can survive.  I may be going off on a tangent.

.. [#] I am convinced that some expert in X will explain to me how all that was wrong or unnecessary.  All it will take is for a X expert to read this.  As Googlebot has trouble finding my site, so I may wait a while.
