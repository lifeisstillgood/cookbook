===============================
Measuring Large Python Programs
===============================

Size does matter
================

_Enterprises_ tend to throw off very large, hard to maintain programs.
The politics and structure of their production tends to enforce this.

As an example, a company I knew well had a major application, with millions of lines of code.  A _clone_ analysis revealed a huge percentage of the code base was essentially cut and paste from other, nearby, parts of the code.  I investigated one example.  If one of six measures of a customer's status changed, then the system was to say colour their name in purple.  The purple-function was a well known problem with the users.  Everyone knew that two of the measures did not turn the name purple - so if one of those was ever changed, they sneakily changed on of the other four up and then down one, just to make the system work.

The code for this was a 2000 line monster.  A dozen functions, all virtually identical, some redundant and never called when you trace the code, some with internal logic that meant they would fail to purplise.  And why was it written that way.  It was clear from the comments.  "I cannot refactor this code, becasue the manual testing will take two weeks and no-one will authorise the test time, so I will copy this function and create a new one, which will be a new code and so not need regression testing."

There are a large number of lessons there.

But the one that matters most to us is ... being able to measure your code. To be able to analyse the source and tell useful metrics about it - is the test coverage going up or down, is the code more complex, consistent in style etc.

Different measures
------------------

Code Complexity
~~~~~~~~~~~~~~~

The McCabe Cyclometric Complexity measure is a useful measure.
Look at githib/lifeisstillgood


Clone
~~~~~

CloneDigger


Style Guides
~~~~~~~~~~~~

PEP-8 obviously.  But pylint will help keep consistency consistent.

doctest
~~~~~~~

The best unit tester out there.  
How do we measure code coverge


Dependancy Analysis
~~~~~~~~~~~~~~~~~~~

`snakefood <http://furius.ca/snakefood/doc/snakefood-doc.html>`_ produces a dot style (what would we do without it !) graph of module dependencies in Python.  Obviously in a compiled language this is a vital piece of knowledge, but even for something so dynamic as Python it is very very useful to know that a.py imports b.py and b.py uses c.py which uses ... a.py.



Behaviour Driven Design / Testing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cucumber is a nice idea.  But flawed. Why use a parser and regexes to cope with plain text when you could just name the functions that regexes point to and clal them direct.

Anyhow, functional tests, that ensure a certain behaviour.  GOod idea.


DevOps
~~~~~~

Yeah, even operations needs some help.




