==================================
Introduction to Enterprise Systems
==================================

Oh God! Its Architecture Isn't it?
==================================

Yes, after ripping the Mickey out of Enterprise Architects, I take
some of it back.  Well not really, but this is important to discuss


Messaging, decoupling, and the like
-----------------------------------
The `Unix Philosophy http://www.faqs.org/docs/artu/ch01s06.html>`_ will serve use well here.
Ultimately we want flexible systems - so we should have flexible applications
The simplest approach is to build lots of little applications that do 
one thing well but can talk on a common messaging bus.

This is where RabbitMQ and AMQP come in.


`AMQP <http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol>`_ 
is an emerging messaging standard, that fairly simply defines how to send 
messages around an organisation.

RabbitMQ is a implementation of the same, in Erlang.  


And, well, that is about it for Enterprise architecture - use the Unix Philosophy
when building your applications, and have a reliable messaging bus that
all your applications can talk to and share requests with.

Simple, huh?

