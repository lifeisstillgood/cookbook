Todo
====
Enable a form of production where there can be any number of depth folders - so I can rganise more easily.
start an erlang part -
 - things needed to be competant in a language 
   - its idioms
   - debugging procedure
   - unit testing
   - patches
   
Why erlang
- of the main language types its only one I do not have some fluency with (OOP, declarative, procedural, functional)


Basics
======
- Installation
  - install server (manual, PXE, kickstart)
  - upgrade (cvsup to merge)
  - jails
  - package building and serving
  - hardware, cabling, servers etc



- SysadminBasics - monitoring

  - netflow
  - firewall
  - tripwire (what has been altered on what machine)
  = mrtg
  - security auditing
  - 


- handling hardware
  - usbdisk
  - wifi
  - image scanner
  

- useful functions
  - gnuplot
  - faces / taskjuggler


- programming
  - unicode


Structure
=========

Knowledge management always used to be a manual process.  One brain,
one notebook.  But we have entered an era where Industrial Processes
are coliding with traditional knowledge management, creating a
revolution where the heavy lifting is still done by machine, but they
lift thoughts not material.

In such uncertain times, specific plans are often worse than useless.
So I ahve tried to set out a set of principles that I beleive,
whatever the strange turns we shall see, will guide us through the next 
generation.

These are placed under Attitude, touching on subjects like Identity or
just how Boeing Airplanes stay up.  From Attitude I try to link to specific
how-to's relevant to the discussion, such as creating client SSL certificates on Identity.




* What is an IT manager *Today*
  names, must be able to cook
  
* Just like scribes
  "scrpang own vellum"
 
* Other skills
  project mgmt and release management
  town planning, right and wrong
  story collecting and telling, 
  managing upwards and outwards  


* real and virtual worlds



Transformational IT Manager - *tomorrow*

Heading to lawyer

WOrkplace environment
- look at temple Inns - how do they handle knowledge work?

How we plan - forwards or backwards
Transparency
Scalability
open source is transparent - and if our society will be run by code as it is currently run by written word, we shall need to be able to read the source, and then have release management processes for our own society.

scalability - prarallel algorithms and data parallel work



